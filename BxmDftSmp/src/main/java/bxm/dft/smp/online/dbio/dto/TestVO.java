/*
 * Generated by VO Generator 
 */
package bxm.dft.smp.online.dbio.dto;

import bxm.common.annotaion.BxmCategory;
import bxm.vo.IValueObject;
import java.util.Collections;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * 
 *
 * @author sysadmin
 */
@SuppressWarnings("all")
@BxmCategory(type="VO", logicalName="", description="", author="sysadmin")
public class TestVO implements IValueObject
{
	private static final long serialVersionUID= -736973036L;
	
	/**
	 * 
	 */
	private java.lang.String input1;
	/**
	 * 
	 */
	private java.lang.String input2;
	
	/**
	 * 
	 * @param input1
	 */
	public void setInput1(java.lang.String input1){
		this.input1= input1;
	}
	
	/**
	 * 
	 */
	public java.lang.String getInput1(){
		return input1;
	}
	/**
	 * 
	 * @param input2
	 */
	public void setInput2(java.lang.String input2){
		this.input2= input2;
	}
	
	/**
	 * 
	 */
	public java.lang.String getInput2(){
		return input2;
	}
	/*
	 * Dynamic Getter Setter
	 */
	private Hashtable<String, Object> htDynamicVariable= new Hashtable<String, Object>();
	
	@Override
	public Object get(String key){
		switch( key.hashCode() ){
		case -1183866457 : /* input1 */
			return getInput1();
		case -1183866456 : /* input2 */
			return getInput2();
		default :
			if ( htDynamicVariable.containsKey(key) ) return htDynamicVariable.get(key);
			else {
				return null;
			}
		}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public void set(String key, Object value){
		switch( key.hashCode() ){
		case -1183866457 : /* input1 */
			setInput1((java.lang.String) value);
			break;
		case -1183866456 : /* input2 */
			setInput2((java.lang.String) value);
			break;
		default :
			htDynamicVariable.put(key, value);
		}
	}
	
	/**
	 * Map for the declared fields and classes
	 */
	public static final Map<String, Class<?>> FIELDS;
	static{
		Map<String, Class<?>> temp= new LinkedHashMap<String, Class<?>>();
		temp.put("input1", java.lang.String.class);
		temp.put("input2", java.lang.String.class);
		FIELDS= Collections.unmodifiableMap(temp);
	}
	
	/**
	 * Map for the declared fields and objects
	 */
	@Override
	public Map<String, Object> getFieldValues(){
		Map<String, Object> map= new LinkedHashMap<String, Object>();
		map.put("input1", getInput1());
		map.put("input2", getInput2());
		return map;
	}
}
